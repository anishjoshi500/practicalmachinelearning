{
  "name": "Practical Machine Learning- Coursera Course Project",
  "tagline": "By- Anish Joshi",
  "body": "## Project Background\r\n\r\n### Background\r\n\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).\r\n\r\n### Data\r\n\r\nThe training data for this project are available here:\r\n\r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\r\n\r\nThe test data are available here:\r\n\r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\r\n\r\nThe data for this project come from this source: http://groupware.les.inf.puc-rio.br/har. If you use the document you create for this class for any purpose please cite them as they have been very generous in allowing their data to be used for this kind of assignment.\r\n\r\n\r\n## Project Report\r\n\r\n### Data Loading & Cleaning\r\n\r\nFirst we need to load all the libraries we will be using in our code and set seed as follows\r\n\r\n    library(caret)\r\n    library(randomForest)\r\n    library(rattle)\r\n    library(rpart)\r\n    library(rpart.plot)\r\n    set.seed(123)\r\nData Loading -\r\n\r\n    train_csv <- read.csv(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\")\r\n    test_csv <- read.csv(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\")\r\n\r\nCheck dimensions\r\n\r\n    dim(train_csv)\r\n    dim(test_csv)\r\n    \r\n    [1] 19622   160\r\n    [1]  20 160\r\n    \r\nData Cleaning -\r\nRemoving all the columns with missing values\r\n\r\n    train_csv_clean <- train_csv[,colSums(is.na(train_csv)) == 0]\r\n    test_csv_clean <- test_csv[,colSums(is.na(test_csv)) == 0]\r\n\r\nAgain checking the dimensions\r\n\r\n    dim(train_csv_clean)\r\n    dim(test_csv_clean)\r\n\r\n    [1] 19622    93\r\n    [1] 20 60\r\n\r\nDeleting variables which are irrelevant and are of no use to us\r\n\r\n    train_csv_final_clean <- train_csv_clean[,-c(1:7)]\r\n    test_csv_final_clean <- test_csv_clean[,-c(1:7)]\r\n    x<-names(train_csv_final_clean) %in% c(\"skewness_roll_belt\", \"skewness_roll_belt.1\", \"skewness_yaw_belt\",\r\n    \"max_yaw_belt\", \"kurtosis_picth_dumbbell\", \"kurtosis_yaw_dumbbell\", \"skewness_roll_dumbbell\",\r\n    \"skewness_pitch_dumbbell\", \"skewness_yaw_dumbbell\", \"max_yaw_dumbbell\", \"min_yaw_dumbbell\",\r\n    \"amplitude_yaw_dumbbell\", \"kurtosis_roll_forearm\", \"kurtosis_picth_forearm\", \"kurtosis_yaw_forearm\",\r\n    \"skewness_roll_forearm\", \"skewness_pitch_forearm\", \"skewness_yaw_forearm\", \"max_roll_forearm\",\r\n    \"max_yaw_forearm\", \"min_roll_forearm\", \"min_yaw_belt\", \"amplitude_yaw_belt\", \"avg_roll_arm\", \"stddev_roll_arm\",\r\n    \"var_roll_arm\", \"avg_pitch_arm\", \"stddev_pitch_arm\", \"var_pitch_arm\", \"avg_yaw_arm\",\r\n    \"stddev_yaw_arm\", \"avg_roll_forearm\", \"stddev_roll_forearm\", \"var_roll_forearm\",\r\n    \"avg_pitch_forearm\", \"stddev_pitch_forearm\", \"var_pitch_forearm\", \"avg_yaw_forearm\",\r\n    \"stddev_yaw_forearm\", \"var_yaw_forearm\", \"var_yaw_arm\", \"kurtosis_roll_arm\", \"kurtosis_picth_arm\",\r\n    \"kurtosis_yaw_arm\", \"skewness_roll_arm\", \"skewness_pitch_arm\", \"skewness_yaw_arm\",\r\n    \"max_roll_arm\", \"min_roll_arm\", \"kurtosis_roll_belt\", \"kurtosis_picth_belt\",\r\n    \"kurtosis_yaw_belt\", \"min_pitch_arm\", \"amplitude_roll_arm\", \"amplitude_pitch_arm\",\r\n    \"kurtosis_roll_dumbbell\", \"min_yaw_forearm\", \"amplitude_roll_forearm\",\r\n    \"amplitude_yaw_forearm\")\r\n    train_csv_final_clean<-train_csv_final_clean[!x]\r\n\r\n\r\n### Data Partioning\r\n\r\nPartioning the data into 60% training set and 40% test set as follows\r\n\r\n    trainer<- createDataPartition(y=train_csv_final_clean$classe, p=0.60, list=FALSE)\r\n    final_train<- train_csv_final_clean[trainer, ]\r\n    final_test<- train_csv_final_clean[-trainer, ]\r\n\r\n### Applying Prediction Algorithms\r\nWe will be using two prediction models namely the Random Forest Model and the Decision Tree Model as follows\r\n\r\nRandom forest\r\n\r\n    model <- randomForest(classe ~., data=final_train, method=\"class\")\r\n    predict_model <- predict(model, final_test, type = \"class\")\r\n    confusionMatrix(predict_model, final_test$classe)\r\n\r\nOutput of the Confusion Matrix for Random Forest\r\n\r\n    Confusion Matrix and Statistics\r\n\r\n              Reference\r\n    Prediction    A    B    C    D    E\r\n             A 2229    9    0    0    0\r\n             B    3 1506   11    0    0\r\n             C    0    3 1355   11    3\r\n             D    0    0    2 1275    2\r\n             E    0    0    0    0 1437\r\n\r\n    Overall Statistics\r\n                                          \r\n                   Accuracy : 0.9944          \r\n                     95% CI : (0.9925, 0.9959)\r\n        No Information Rate : 0.2845          \r\n        P-Value [Acc > NIR] : < 2.2e-16       \r\n                                          \r\n                      Kappa : 0.9929          \r\n     Mcnemar's Test P-Value : NA              \r\n\r\n    Statistics by Class:\r\n\r\n                         Class: A Class: B Class: C Class: D Class: E\r\n    Sensitivity            0.9987   0.9921   0.9905   0.9914   0.9965\r\n    Specificity            0.9984   0.9978   0.9974   0.9994   1.0000\r\n    Pos Pred Value         0.9960   0.9908   0.9876   0.9969   1.0000\r\n    Neg Pred Value         0.9995   0.9981   0.9980   0.9983   0.9992\r\n    Prevalence             0.2845   0.1935   0.1744   0.1639   0.1838\r\n    Detection Rate         0.2841   0.1919   0.1727   0.1625   0.1832\r\n    Detection Prevalence   0.2852   0.1937   0.1749   0.1630   0.1832\r\n    Balanced Accuracy      0.9985   0.9949   0.9939   0.9954   0.9983\r\n\r\nDecision Trees\r\n\r\n    model1<- rpart(classe ~ ., data=final_train, method=\"class\")\r\n    predict_model1<- predict(model1, final_test, type = \"class\")\r\n    confusionMatrix(predict_model1, final_test$classe)\r\n\r\nOutput of the Confusion Matrix for the Decision trees\r\n\r\n    Confusion Matrix and Statistics\r\n\r\n              Reference\r\n    Prediction    A    B    C    D    E\r\n             A 2059  203   18  128   79\r\n             B   60 1086  211   70   93\r\n             C   20   83  998  184   83\r\n             D   71  138   81  863  120\r\n             E   22    8   60   41 1067\r\n\r\n    Overall Statistics\r\n                                          \r\n                   Accuracy : 0.774           \r\n                     95% CI : (0.7646, 0.7832)\r\n        No Information Rate : 0.2845          \r\n        P-Value [Acc > NIR] : < 2.2e-16       \r\n                                          \r\n                      Kappa : 0.713           \r\n     Mcnemar's Test P-Value : < 2.2e-16       \r\n\r\n    Statistics by Class:\r\n\r\n                         Class: A Class: B Class: C Class: D Class: E\r\n    Sensitivity            0.9225   0.7154   0.7295   0.6711   0.7399\r\n    Specificity            0.9238   0.9314   0.9429   0.9375   0.9795\r\n    Pos Pred Value         0.8279   0.7145   0.7295   0.6779   0.8907\r\n    Neg Pred Value         0.9677   0.9317   0.9429   0.9356   0.9436\r\n    Prevalence             0.2845   0.1935   0.1744   0.1639   0.1838\r\n    Detection Rate         0.2624   0.1387   0.1744   0.1622   0.1527\r\n    Balanced Accuracy      0.9231   0.8234   0.1272   0.1100   0.1360\r\n    Detection Prevalence   0.3170   0.1934   0.8362   0.8043   0.8597\r\n\r\nThe Random Forest Algorithm gives us better accuracy of 0.9944 compared to the Decision Trees Algorithm whose accuracy is just 0.774 thus for prediction we will be using the Random Forest Algorithm.\r\n\r\n### Prediction and Output File Generation\r\n\r\nPrediction using Random Forest Algorithm as follows\r\n\r\n    final_prediction <- predict(model, test_csv, type = \"class\")\r\n    print(final_prediction)\r\n\r\nOutput of Final Prediction\r\n\r\n    1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 \r\n    B  A  B  A  A  E  D  B  A  A  B  C  B  A  E  E  A  B  B  B \r\n    Levels: A B C D E\r\n\r\nWriting Prediction Output to Files\r\n\r\n    pmlwrite = function(temp){\r\n    n = length(temp)\r\n    for(i in 1:n){\r\n      filename = paste0(\"problem-id_\",i,\".txt\")\r\n      write.table(temp[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\r\n     }\r\n    }\r\n    pmlwrite(final_prediction)\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}